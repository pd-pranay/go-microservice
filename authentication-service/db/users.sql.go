// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserID = `-- name: CreateUserID :one
insert into users (email, first_name, last_name, password, user_active, created_at, updated_at) values ($1, $2, $3, $4, $5, $6, $7) returning index
`

type CreateUserIDParams struct {
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	Password   string    `json:"password"`
	UserActive int32     `json:"user_active"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateUserID(ctx context.Context, arg CreateUserIDParams) (int32, error) {
	row := q.queryRow(ctx, q.createUserIDStmt, createUserID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.UserActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var index int32
	err := row.Scan(&index)
	return index, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
delete from users where index = ($1)
`

func (q *Queries) DeleteUserByID(ctx context.Context, index int32) error {
	_, err := q.exec(ctx, q.deleteUserByIDStmt, deleteUserByID, index)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, email, first_name, last_name, password, user_active, created_at, updated_at from users order by last_name
`

type GetAllUsersRow struct {
	ID         uuid.UUID `json:"id"`
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	Password   string    `json:"password"`
	UserActive int32     `json:"user_active"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Password,
			&i.UserActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByEmailUsers = `-- name: GetByEmailUsers :one
select id, email, first_name, last_name, password, user_active, created_at, updated_at from users where email = ($1)
`

type GetByEmailUsersRow struct {
	ID         uuid.UUID `json:"id"`
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	Password   string    `json:"password"`
	UserActive int32     `json:"user_active"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) GetByEmailUsers(ctx context.Context, email string) (GetByEmailUsersRow, error) {
	row := q.queryRow(ctx, q.getByEmailUsersStmt, getByEmailUsers, email)
	var i GetByEmailUsersRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOneUsers = `-- name: GetOneUsers :one
select id, email, first_name, last_name, password, user_active, created_at, updated_at from users where index = ($1)
`

type GetOneUsersRow struct {
	ID         uuid.UUID `json:"id"`
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	Password   string    `json:"password"`
	UserActive int32     `json:"user_active"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) GetOneUsers(ctx context.Context, index int32) (GetOneUsersRow, error) {
	row := q.queryRow(ctx, q.getOneUsersStmt, getOneUsers, index)
	var i GetOneUsersRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetPassword = `-- name: ResetPassword :exec
update users set password = ($1) where index = ($2)
`

type ResetPasswordParams struct {
	Password string `json:"password"`
	Index    int32  `json:"index"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.exec(ctx, q.resetPasswordStmt, resetPassword, arg.Password, arg.Index)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :exec
update users set email = ($1), first_name = ($2), last_name = ($3), user_active = ($4), updated_at = ($5) where index = ($6)
`

type UpdateUserByIDParams struct {
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	UserActive int32     `json:"user_active"`
	UpdatedAt  time.Time `json:"updated_at"`
	Index      int32     `json:"index"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.exec(ctx, q.updateUserByIDStmt, updateUserByID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.UserActive,
		arg.UpdatedAt,
		arg.Index,
	)
	return err
}
