// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserIDStmt, err = db.PrepareContext(ctx, createUserID); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserID: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getByEmailUsersStmt, err = db.PrepareContext(ctx, getByEmailUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetByEmailUsers: %w", err)
	}
	if q.getOneUsersStmt, err = db.PrepareContext(ctx, getOneUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneUsers: %w", err)
	}
	if q.resetPasswordStmt, err = db.PrepareContext(ctx, resetPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetPassword: %w", err)
	}
	if q.updateUserByIDStmt, err = db.PrepareContext(ctx, updateUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserByID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserIDStmt != nil {
		if cerr := q.createUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserIDStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getByEmailUsersStmt != nil {
		if cerr := q.getByEmailUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByEmailUsersStmt: %w", cerr)
		}
	}
	if q.getOneUsersStmt != nil {
		if cerr := q.getOneUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneUsersStmt: %w", cerr)
		}
	}
	if q.resetPasswordStmt != nil {
		if cerr := q.resetPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserByIDStmt != nil {
		if cerr := q.updateUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserByIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createUserIDStmt    *sql.Stmt
	deleteUserByIDStmt  *sql.Stmt
	getAllUsersStmt     *sql.Stmt
	getByEmailUsersStmt *sql.Stmt
	getOneUsersStmt     *sql.Stmt
	resetPasswordStmt   *sql.Stmt
	updateUserByIDStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createUserIDStmt:    q.createUserIDStmt,
		deleteUserByIDStmt:  q.deleteUserByIDStmt,
		getAllUsersStmt:     q.getAllUsersStmt,
		getByEmailUsersStmt: q.getByEmailUsersStmt,
		getOneUsersStmt:     q.getOneUsersStmt,
		resetPasswordStmt:   q.resetPasswordStmt,
		updateUserByIDStmt:  q.updateUserByIDStmt,
	}
}
